Name:

Number of elements:

Bubble Sort
Sorted:2.6s
Reversed:5.6s
Random:4.6s

Bubble Sort Early Exit
Sorted:.0005s
Reversed:6s
Random:4.6s

Selection Sort
Sorted:1.8s
Reversed:2s
Random:1.9s

Insertion Sort
Sorted:.0009s
Reversed:3.8s
Random:2s

Merge Sort
Sorted:.02s
Reversed:.02s
Random:.02s

Questions to answer:
1) What was the worst case scenario for any sorting technique?
bubbleSortEarlyExit reversed

2) The first 3 sorts have the same runtime of O(n^2). Why were the times different? Why would one be more efficient than the others?
They all have different ways of finishing the sort. insertionSort could be better if the data is almost sorted

3) Why was merge sort so much more efficient?
it layers the sorting with smaller lists

4) The built-in sorting technique for most programming languages is known as TimSort.
This is a merge sort until the arrays have fewer than 10 elements, then it does an insertion sort. Why would this be useful?
insertionSort is better when data is almost sorted

5) What issues can you see with a recursive sorting technique like merge sort?
Very large data sets might cause complications and exceed computing limits